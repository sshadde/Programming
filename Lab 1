// Task 2.1
#include<iostream>
#include<queue>
void enqueue(std::queue<float>& Q, float x)
{
	Q.push(x);
}
void dequeue(std::queue<float>& Q)
{
	Q.pop();
}
void display(std::queue<float>& Q)
{
	std::queue<float> tmpQ = Q;
	while (!tmpQ.empty())
	{
		std::cout << tmpQ.front() << "\n";
		tmpQ.pop();
	}
}
float summary(std::queue<float>& Q)
{
	std::queue<float> tmpQ = Q;
	float sum = 0;
	while (!tmpQ.empty())
	{
		sum += tmpQ.front();
		tmpQ.pop();
	}
	return sum;
}
int main()
{
	std::queue<float> Q;
	enqueue(Q, 2.1);
	enqueue(Q, 2.1);
	enqueue(Q, 5.3);
	std::cout << "Original queue:\n";
	display(Q);
	dequeue(Q);
	enqueue(Q, 4.9);
	std::cout << "\nModified queue:\n";
	display(Q);
	std::cout << "\nSummary:\n" << summary(Q);
}
// End of task 2.1

// Task 2.2
#include<iostream>
#include<stack>
#include<string>
void push(std::stack<std::string>& Q, std::string x)
{
	Q.push(x);
}
void pop(std::stack<std::string> & Q)
{
	Q.pop();
}
void display(std::stack<std::string>& Q)
{
	std::stack<std::string> tmpQ = Q;
	while (!tmpQ.empty())
	{
		std::cout << tmpQ.top() << "\n";
		tmpQ.pop();
	}
}
void words(std::stack<std::string>& Q)
{
	std::stack<std::string> tmpQ = Q;
	std::cout << "2-symbol words:\n";
	while (!tmpQ.empty())
	{
		if (tmpQ.top().size() == 2)
		{
			std::cout << tmpQ.top() << "\n";
		}
		tmpQ.pop();
	}
}
int main()
{
	std::stack<std::string> Q;
	push(Q, "Students");
	push(Q, "of");
	push(Q, "the");
	push(Q, "group");
	push(Q, "TE");
	push(Q, "3");
	display(Q);
	std::cout << "\n";
	pop(Q);
	display(Q);
	std::cout << "\n";
	words(Q);
}
// End of task 2.2

// Task 3
#include<iostream>
#include<queue>
int main()
{
	std::queue<int> q1, q2;
	for (int i = 1; i <= 10; i++)
	{
		if (i % 2 != 0)
		{
			q1.push(i);
		}
		if (i % 2 == 0)
		{
			q2.push(i);
		}
	}
	int* q1ptrFront = &q1.front();
	int* q1ptrBack = &q1.back();
	std::cout << "Pointer to the first Q1 element: " << *q1ptrFront;
	std::cout << "\nPointer to the last Q1 element: " << *q1ptrBack;
	int* q2ptrFront = &q2.front();
	int* q2ptrBack = &q2.back();
	std::cout << "\nPointer to the first Q2 element: " << *q2ptrFront;
	std::cout << "\nPointer to the last Q2 element: " << *q2ptrBack;
}
// End of task 3

// Task 4.1
#include<iostream>
#include<list>
int main()
{
	std::list<int> nums = { 148, 52, 25, 55, 145, 2005, 33, 822, 69 };
	auto iter = find(nums.begin(), nums.end(), 55);
	if (iter != nums.begin() and iter != nums.end())
	{
		iter--;
		nums.erase(iter);
	}
	for (int n : nums)
	{
		std::cout << n << "\n";
	}
}
// End of task 4.1
