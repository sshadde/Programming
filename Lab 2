// Task 1

#include<iostream>
#include<fstream>
int main() {
	std::ifstream a("a.txt");
	int n, count = 0, sum = 0;
	while (a >> n) {
		if (n > 0) {
			sum += n;
			count++;
		}
	}
	std::cout << "Quantity of positives: " << count << "\n" << "Summary of positives: " << sum << "\n";
	a.close();
}

// End of task 1

// Task 2

#include<iostream>
#include<fstream>
int main() {
	std::ifstream a1("a1.txt");
	std::ifstream a2("a2.txt");
	int n1, n2;
	int num, count = 0;
	while (a1 >> num) {
		if (num == 0) {
			count++;
		}
	}
	while (a2 >> num) {
		if (num == 0) {
			count++;
		}
	}
	std::cout << "Quantity of zeroes: " << count << "\n";
	a1.close();
	a2.close();
}

// End of task 2

// Task 3

#include <iostream>
#include <fstream>
#include <cctype> // Для использования функции isdigit()
int main() {
    std::ifstream input("input.txt");
    std::ofstream output("output.txt");
    char ch;
    while (input.get(ch)) {
        if (std::isdigit(ch)) {
            output.put('*');
        }
        else {
            output.put(ch);
        }
    }
    std::cout << "Цифры в файле были заменены на '*'.\n";
    input.close();
    output.close();;
}

// End of task 3

// Task 4

#include<iostream>
#include<fstream>
#include<vector>
int main() {
	std::vector<int> a;
	std::fstream input("input.txt");
	int n;
	while (input >> n) {
		a.push_back(n);
	}
	input.close();
	int sum = 0, count = 0;
	double avg;
	for (int i = 2; i < a.size(); i += 3) {
		sum += a[i];
		count++;
	}
	avg = sum / count;
	std::cout << "Average is: " << avg;
}

// End of task 4

// Task 5

#include <iostream>
#include <fstream>
#include <sstream>
#include <vector>
#include <string>

struct Owner {
    std::string surname;
    std::string name;
    std::string patronymic;
    std::string phone_number;
    std::string address;
    std::string car_brand;
    std::string car_number;
    std::string passport_number;
};

int main() {
    setlocale(LC_ALL, "Rus");
    std::ifstream input_file("owners.txt");
    std::ofstream output_file("vaz_owners.txt");
    std::vector<Owner> owners;
    std::string line;
    while (std::getline(input_file, line)) {
        std::stringstream ss(line);
        Owner owner;
        std::getline(ss, owner.surname, ';');
        std::getline(ss, owner.name, ';');
        std::getline(ss, owner.patronymic, ';');
        std::getline(ss, owner.phone_number, ';');
        std::getline(ss, owner.address, ';');
        std::getline(ss, owner.car_brand, ';');
        std::getline(ss, owner.car_number, ';');
        std::getline(ss, owner.passport_number, ';');
        if (owner.car_brand == "Ваз") {
            owners.push_back(owner);
        }
    }
    for (const auto& owner : owners) {
        output_file << owner.surname << "; " << owner.name << "; " << owner.patronymic << "; " << owner.phone_number << "; " 
            << owner.address << "; " << owner.car_brand << "; " << owner.car_number << "; " << owner.passport_number << std::endl;
    }
    std::cout << "Информация о владельцах автомобилей марки 'Ваз' сохранена в файле 'vaz_owners.txt'." << std::endl;
    input_file.close();
    output_file.close();
    return 0;
}

// End of task 5

// Task 6

#include<iostream>
#include<fstream>
int main() {
	std::fstream input_file("f.txt");
	std::fstream output_file("f_result.txt");
	int num;
	int sum = 0;
	int sqrd = 1;
	while (input_file >> num) {
		sum += num;
		sqrd *= num;
	}
	sum = abs(sum);
	sqrd *= sqrd;
	output_file << sum;
	output_file << "\n";
	output_file << sqrd;
	input_file.close();
	output_file.close();
}

// End of task 6

// Task 7

#include <iostream>
#include <fstream>
#include <vector>
using namespace std;
int sumOfPositiveEvenElements(const vector<vector<int>>& matrix) {
    int sum = 0;
    for (const auto& row : matrix) {
        for (int element : row) {
            if (element > 0 && element % 2 == 0) {
                sum += element;
            }
        }
    }
    return sum;
}
void replaceMatrixWithIdentity(vector<vector<int>>& matrix) {
    int n = matrix.size();
    for (int i = 0; i < n; ++i) {
        for (int j = 0; j < n; ++j) {
            matrix[i][j] = (i == j) ? 1 : 0;
        }
    }
}
int main() {
    setlocale(LC_ALL, "Rus");
    ifstream inFile("input.txt");
    ofstream outFile1("output1.txt");
    ofstream outFile2("output2.txt");
    int k, m, n;
    inFile >> k;
    cout << "Количество матриц: " << k << endl;
    for (int matrixNum = 0; matrixNum < k; ++matrixNum) {
        inFile >> m >> n;
        cout << "Матрица " << matrixNum + 1 << ": размер " << m << "x" << n << endl;
        vector<vector<int>> matrix(m, vector<int>(n));
        for (int i = 0; i < m; ++i) {
            for (int j = 0; j < n; ++j) {
                inFile >> matrix[i][j];
            }
        }
        cout << "Содержимое матрицы " << matrixNum + 1 << ":" << endl;
        for (const auto& row : matrix) {
            for (int element : row) {
                cout << element << " ";
            }
            cout << endl;
        }
        int sum = sumOfPositiveEvenElements(matrix);
        cout << "Сумма положительных четных элементов матрицы " << matrixNum + 1 << ": " << sum << endl;
        if (sum % 2 == 0) {
            replaceMatrixWithIdentity(matrix);
            for (const auto& row : matrix) {
                for (int element : row) {
                    outFile2 << element << " ";
                }
                outFile2 << endl;
            }
        }
        else {
            for (const auto& row : matrix) {
                for (int element : row) {
                    outFile1 << element << " ";
                }
                outFile1 << endl;
            }
        }
    }
    inFile.close();
    outFile1.close();
    outFile2.close();
    return 0;
}

// End of task 7

// Task 8

#include <iostream>
#include <fstream>
#include <string>
using namespace std;
struct TV {
    string firmName;
    float screenSize;
    float cost;
};
void writeTV(ofstream& outFile, const TV& tv) {
    size_t firmNameLength = tv.firmName.size();
    outFile.write((char*)&firmNameLength, sizeof(firmNameLength));
    outFile.write(tv.firmName.data(), firmNameLength);
    outFile.write((char*)&tv.screenSize, sizeof(tv.screenSize));
    outFile.write((char*)&tv.cost, sizeof(tv.cost));
}
void readTV(ifstream& inFile, TV& tv) {
    size_t firmNameLength;
    inFile.read((char*)&firmNameLength, sizeof(firmNameLength));
    char buffer[256];
    inFile.read(buffer, firmNameLength);
    buffer[firmNameLength] = '\0';
    tv.firmName = string(buffer);
    inFile.read((char*)&tv.screenSize, sizeof(tv.screenSize));
    inFile.read((char*)&tv.cost, sizeof(tv.cost));
}

int main() {
    setlocale(LC_ALL, "Rus");
    ofstream outFile("TVs.bin", ios::binary);
    TV tv1 = { "Samsung", 40, 500 };
    TV tv2 = { "LG", 32, 400 };
    TV tv3 = { "Sony", 45, 600 };
    TV tv4 = { "Samsung", 55, 800 };
    writeTV(outFile, tv1);
    writeTV(outFile, tv2);
    writeTV(outFile, tv3);
    writeTV(outFile, tv4);
    outFile.close();
    ifstream inFile("TVs.bin", ios::binary);
    TV tv;
    int samsungTVsCount = 0;
    while (!inFile.eof()) {
        readTV(inFile, tv);
        if (!inFile.eof() && tv.firmName == "Samsung" && tv.screenSize > 32.0) {
            cout << "Фирма: " << tv.firmName << endl;
            cout << "Размер по диагонали: " << tv.screenSize << " дюймов" << endl;
            cout << "Стоимость: $" << tv.cost << endl << endl;
            samsungTVsCount++;
        }
    }
    cout << "Количество телевизоров фирмы Samsung с размером более 32 дюймов: " << samsungTVsCount << endl;
    inFile.close();
}

// End of task 8

// Task 9

#include <iostream>
#include <fstream>
#include <string>
#include <vector>
#include <algorithm>
void writeToFile(const std::string& filename, const std::vector<char>& data) {
    std::ofstream file(filename, std::ios::binary);
    if (file.is_open()) {
        file.write(data.data(), data.size());
        file.close();
    }
}
std::vector<char> readFromFile(const std::string& filename) {
    std::vector<char> data;
    std::ifstream file(filename, std::ios::binary);
    if (file.is_open()) {
        char ch;
        while (file.get(ch)) {
            data.push_back(ch);
        }
        file.close();
    }
    return data;
}
std::string toUpperCase(const std::string& str) {
    std::string upperCaseStr = str;
    std::transform(upperCaseStr.begin(), upperCaseStr.end(), upperCaseStr.begin(), ::toupper);
    return upperCaseStr;
}
int main() {
    setlocale(LC_ALL, "Rus");
    std::string inputText;
    std::cout << "Введите текст: ";
    std::getline(std::cin, inputText);
    std::vector<char> data(inputText.begin(), inputText.end());
    writeToFile("data.bin", data);
    std::cout << "Текст записан в файл." << std::endl;
    std::vector<char> dataFromFile = readFromFile("data.bin");
    std::string textFromFile(dataFromFile.begin(), dataFromFile.end());
    std::string upperCaseText = toUpperCase(textFromFile);
    std::cout << "Символы до изменения данных в файле: " << textFromFile << std::endl;
    std::cout << "Символы после изменения данных в файле: " << upperCaseText << std::endl;
}

// End of task 9

// Task 10

#include <iostream>
#include <fstream>
#include <string>
#include <vector>
using namespace std;
struct PurchaseInfo {
    string name;
    string date;
    double totalCostFirstHalf;
    double totalCostSecondHalf;
    double discountPercent;
};
void printPurchaseInfo(const PurchaseInfo& purchase) {
    cout << "Покупатель: " << purchase.name << endl;
    cout << "Дата покупки: " << purchase.date << endl;
    cout << "Общая стоимость за первое полугодие: " << purchase.totalCostFirstHalf << " руб." << endl;
    cout << "Общая стоимость за второе полугодие: " << purchase.totalCostSecondHalf << " руб." << endl;
    cout << "Начальный процент скидки: " << purchase.discountPercent << "%" << endl << endl;
}

int main() {
    setlocale(LC_ALL, "Rus");
    vector<PurchaseInfo> purchases = {
        {"Иванов И.И.", "01.01.2024", 8000.0, 12000.0, 5.0},
        {"Петров П.П.", "15.01.2024", 15000.0, 8000.0, 7.0}
    };
    ofstream outFile("purchases.bin", ios::binary);
    for (const auto& purchase : purchases) {
        outFile.write((char*)&purchase, sizeof(PurchaseInfo));
    }
    outFile.close();
    ifstream inFile("purchases.bin", ios::binary);
    PurchaseInfo tempPurchase;
    while (inFile.read((char*)&tempPurchase, sizeof(PurchaseInfo))) {
        if (tempPurchase.totalCostFirstHalf >= 10000.0 && tempPurchase.totalCostSecondHalf >= 10000.0) {
            tempPurchase.discountPercent += 7.0;
        }
        printPurchaseInfo(tempPurchase);
    }
    inFile.close();
}

// End of task 10
