// Task 2.1
#include<iostream>
#include<queue>
void enqueue(std::queue<float>& Q, float x)
{
	Q.push(x);
}
void dequeue(std::queue<float>& Q)
{
	Q.pop();
}
void display(std::queue<float>& Q)
{
	std::queue<float> tmpQ = Q;
	while (!tmpQ.empty())
	{
		std::cout << tmpQ.front() << "\n";
		tmpQ.pop();
	}
}
float summary(std::queue<float>& Q)
{
	std::queue<float> tmpQ = Q;
	float sum = 0;
	while (!tmpQ.empty())
	{
		sum += tmpQ.front();
		tmpQ.pop();
	}
	return sum;
}
int main()
{
	std::queue<float> Q;
	enqueue(Q, 2.1);
	enqueue(Q, 2.1);
	enqueue(Q, 5.3);
	std::cout << "Original queue:\n";
	display(Q);
	dequeue(Q);
	enqueue(Q, 4.9);
	std::cout << "\nModified queue:\n";
	display(Q);
	std::cout << "\nSummary:\n" << summary(Q);
}
// End of task 2.1

// Task 2.2
#include<iostream>
#include<stack>
#include<string>
void push(std::stack<std::string>& Q, std::string x)
{
	Q.push(x);
}
void pop(std::stack<std::string> & Q)
{
	Q.pop();
}
void display(std::stack<std::string>& Q)
{
	std::stack<std::string> tmpQ = Q;
	while (!tmpQ.empty())
	{
		std::cout << tmpQ.top() << "\n";
		tmpQ.pop();
	}
}
void words(std::stack<std::string>& Q)
{
	std::stack<std::string> tmpQ = Q;
	std::cout << "2-symbol words:\n";
	while (!tmpQ.empty())
	{
		if (tmpQ.top().size() == 2)
		{
			std::cout << tmpQ.top() << "\n";
		}
		tmpQ.pop();
	}
}
int main()
{
	std::stack<std::string> Q;
	push(Q, "Students");
	push(Q, "of");
	push(Q, "the");
	push(Q, "group");
	push(Q, "TE");
	push(Q, "3");
	display(Q);
	std::cout << "\n";
	pop(Q);
	display(Q);
	std::cout << "\n";
	words(Q);
}
// End of task 2.2
